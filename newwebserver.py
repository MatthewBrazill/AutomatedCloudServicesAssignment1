#! usr/bin/env python3


# Imports
import uuid
import sys
import boto3
import logging
import asyncio

# Resources
s3 = boto3.resource("s3")

# Logging Configuration
logging.basicConfig(
    format="%(asctime)s %(levelname)s: %(message)s",
    filename="./logs/logfile.log",
    level="DEBUG"
)

# Global Variables
# An ID for the creation process. This ID is used to unique-ify the S3 bucket and instance name.
global processID
processID = str(uuid.uuid4())
logging.info("Creating session UUID: {processID}", processID)

# The AWS account ID that identifies the user. This is needed for the cleanup process.
global accountID
accountID = str(boto3.client('sts').get_caller_identity()['Account'])
logging.info("Finding aws account ID: {accountID}", accountID)

# TODO
# 1. Add more extensive logging


# Main function
async def main():
    """The main function to start all the processes and gather user input.

    After gathering the details from the user the program starts all the 
    individual task off, such as the creation of the S3 Bucket, the creation 
    of the EC2 instance and the launching of the Apache server. If the user 
    doesn't provide an input a generic one is generated.
    """

    # Getting parameters from command. If they are not defined or avalabel the
    # program uses autogenerated defaults.
    if "-bucket_name" in sys.argv:
        bucketName = sys.argv[sys.argv.index("-bucket_name") + 1]
    else:
        bucketName = f"webserver-bucket-{processID}"
    logging.info("Bucket name set to '%s'.", bucketName)

    if "-instance_name" in sys.argv:
        instanceName = sys.argv[sys.argv.index("-instance_name") + 1]
    else:
        instanceName = f"webserver-{processID}"
    logging.info("EC2 Instance name set to '%s'.", instanceName)

    if "-web_files_path" in sys.argv:
        webFilesPath = sys.argv[sys.argv.index("-web_files_path") + 1]
    else:
        webFilesPath = "./DefaultWebserver"
    logging.info("Default webfiles used.")

    # Create the Bucket
    await createBucket(bucketName)

    # Create the Instance
    await createInstance(instanceName)

    # Cleanup while testing
    await cleanup(s3.Bucket(bucketName))


# Function to create the Bucket
async def createBucket(bucketName: str) -> bool:
    """This function creates the S3 Bucket.

    This function creates the Bucket that contains the image files needed for 
    the static webserver that will run on the EC2 instance. It also uploads
    the files.
    """

    # Creating the S3 Bucket
    bucket = s3.Bucket(bucketName)

    try:
        logging.info("Creating the S3 bucket...")
        resp = await bucket.create(
            Bucket=bucketName,
            CreateBucketConfiguration={
                "LocationConstraint": "eu-west-1"
            }
        )

    except:
        logging.error("An unexpected error occurred. Aborting...")
        await cleanup(bucket)

    logging.info("Bucket successfully created.")
    return True


# Function to create the instance
async def createInstance(instanceName: str) -> bool:
    return


# The cleanup function
async def cleanup(bucket) -> bool:
    """A cleanup function to remove all created resources.

    A function to clean up after a program failure to try and prevent as 
    much cost as possible.
    """

    logging.info("Starting cleanup...")
    # TODO Expand cleanup to include all resources

    # Bucket Removal
    logging.info("Deleting S3 Bucket...")
    resp = bucket.delete(
        ExpectedBucketOwner=accountID
    )

    logging.info("Cleanup complete.")
    return True


# Starting the program
logging.info("Starting program...")
asyncio.get_event_loop().run_until_complete(main())
logging.info("Program complete.")

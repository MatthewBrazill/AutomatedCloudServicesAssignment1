#! usr/bin/env python3


# Imports
import uuid
import sys
import boto3
import logging

# Resources
s3 = boto3.resource("s3")

# Global Variables
global forceCreation
forceCreation = False

global processID
processID = str(uuid.uuid4())

# TODO Add more extensive logging


# Main function
def main():
    """The main function to start all the processes and gather user input.

    After gathering the details from the user the program starts all the 
    individual task off, such as the creation of the S3 Bucket, the creation 
    of the EC2 instance and the launching of the Apache server. If the user 
    doesn't provide an input a generic one is generated.
    """

    # Getting parameters from command. If they are not defined or avalabel the
    # program uses autogenerated defaults.
    if "-bucket_name" in sys.argv:
        bucketName = sys.argv[sys.argv.index("-bucket_name") + 1]
    else:
        bucketName = f"webserver-bucket-{processID}"
    logging.info("Bucket name set to '%s'.", bucketName)

    if "-instance_name" in sys.argv:
        instanceName = sys.argv[sys.argv.index("-instance_name") + 1]
    else:
        instanceName = f"webserver-{processID}"
    logging.info("EC2 Instance name set to '%s'.", instanceName)

    if "-web_files_path" in sys.argv:
        webFilesPath = sys.argv[sys.argv.index("-web_files_path") + 1]
    else:
        webFilesPath = "./DefaultWebserver"
    logging.info("Default webfiles used.")

    # Create the Bucket
    createBucket(bucketName)

    # Create the Instance
    createInstance(instanceName)


# Function to create the Bucket
def createBucket(bucketName: str) -> bool:
    """This function creates the S3 Bucket.

    This function creates the Bucket that contains the image files needed for 
    the static webserver that will run on the EC2 instance. It also uploads
    the files.
    """

    # Creating the S3 Bucket
    bucket = s3.Bucket(bucketName)

    try:
        logging.info("Creating the bucket...")
        resp = bucket.create(
            Bucket=bucketName,
            CreateBucketConfiguration={
                "LocationConstraint": "eu-west-1"
            }
        )
        print(f"\n" + resp + "\n")

    except:
        logging.error("An unexpected error occurred. Aborting...")
        cleanup()

    return True


# Function to create the instance
def createInstance(instanceName: str) -> bool:
    return


# The cleanup function
def cleanup() -> bool:
    """A cleanup function to remove all created resources.

    A function to clean up after a program failure to try and prevent as 
    much cost as possible.
    """

    # TODO Expand cleanup to include all resources

    

    return True


# Starting the program
logging.basicConfig(
    format="%(asctime)s %(levelname)s: %(message)s",
    filename="./logs/logfile.log",
    level="DEBUG"
)

logging.info("Starting program...")
main()
